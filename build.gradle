plugins {
	id "com.moowork.node" version "1.3.1"
	id 'org.springframework.boot' version '2.4.1'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'checkstyle'
	id 'jacoco'
	id 'java'
}

group = 'de.kettcards'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('testcontainersVersion', "1.15.1")
}

dependencies {
	//compiler
	annotationProcessor 'org.projectlombok:lombok'

	//spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'



	//db
	runtimeOnly 'org.hsqldb:hsqldb'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'


	//jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'

	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'


	//pdf generator
	implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.22'
	implementation 'com.twelvemonkeys.imageio:imageio:3.6.2'
	implementation 'com.twelvemonkeys.imageio:imageio-batik:3.6.2'
	implementation 'org.apache.xmlgraphics:batik-transcoder:1.14'
	implementation group: 'de.rototor.pdfbox', name: 'graphics2d', version: '0.31'
	implementation 'com.weblookandfeel:svg-salamander:1.1.2.2'



	//table import
	implementation group: 'org.apache.poi', name: 'poi', version: '4.1.2'
	implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'


	//webjars
	runtimeOnly group: 'org.webjars.bower', name: 'jquery', version: '3.5.1'


	//dev
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-starter-actuator'


	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
	testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '3.141.59'
	testImplementation group: 'org.apache.pdfbox', name: 'preflight', version: '2.0.22'
	testImplementation 'com.github.romankh3:image-comparison:4.3.0'

}

node {
	version = '14.16.0'
	distBaseUrl = 'https://nodejs.org/dist'
	download = true
	// Set the work directory for unpacking node
	workDir = file(".gradle/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/npm")

	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}")
}

repositories.whenObjectAdded {
	if (it instanceof IvyArtifactRepository) {
		metadataSources {
			artifact()
		}
	}
}

test {
	useJUnitPlatform()
	ignoreFailures = true
	finalizedBy jacocoTestReport
}

checkstyle {
	ignoreFailures = true
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

task buildTs(type:Exec) {
	task cleanJs(type: Delete) {
		delete "./src/main/resources/static/front/front.js";
	}
	dependsOn tasks.cleanJs

	commandLine 'tools/node/14.15.4/win64/node.exe', "./tools/ts/4.0.b/tsc.js",
			'-p', './src/ts_front/front/tsconfig.json'

	standardOutput = System.out;
}

task buildTsStruct(type: NpmTask) {
	description = "Build Struct-Editor"
	workingDir = file("${project.projectDir}/src/ts_struct")
	args = ['run', 'buildProd']
}


build {
	dependsOn buildTs
	dependsOn buildTsStruct
}

tasks.register("bootRunDebug") {
	group = "application"
	doFirst {
		tasks.bootRun.configure {
			systemProperty("spring.profiles.active", "debug")
		}
	}
	finalizedBy("bootRun")
}

